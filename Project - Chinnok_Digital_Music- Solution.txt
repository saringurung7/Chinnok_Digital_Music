Project - Chinnok_Digital_Music

select * from Album; -- 347
select * from Artist; -- 275
select * from Customer; -- 59
select * from Employee; -- 8
select * from Genre; -- 25
select * from Invoice; -- 412
select * from InvoiceLine; -- 2240
select * from MediaType; -- 5
select * from Playlist; -- 18
select * from PlaylistTrack; -- 8715
select * from Track; -- 3503

1) Find the artist who has contributed with the maximum no of albums. Display the artist name and the no of albums.

with cte as
      (select artistid, count(1) as no_of_albums
       , rank() over(order by count(1) desc) as rnk
       from Album
       group by artistid)
select art.name as artist_name, c.no_of_albums
from Artist art
join cte c on c.artistid = art.artistid
where rnk=1;

2) Display the name, email id, country of all listeners who love Jazz, Rock and Pop music.

select (c.firstname||' '||c.lastname) as customers_name, c.email as email_id, c.country as country,g.name as genre
from InvoiceLine il
join Track t on t.trackid = il.trackid
join Genre g on g.genreid = t.genreid
join Invoice iv on iv.invoiceid = il.invoiceid
join Customer c on c.customerid = iv.customerid
where g.name in ('Jazz', 'Rock', 'Pop');

3) Find the employee who has supported the most no of customers. Display the employee name and designation

with temp as
   (select supportrepid, count(1) as no_of_customers
	from Customer
	group by supportrepid)
select (emp.firstname||' '||emp.lastname) as emp_name, emp.title as designation, t.no_of_customers
from Employee emp
join temp t on t.supportrepid = emp.employeeid;

4) Which city corresponds to the best customers?

with cte as
	(select customerid, sum(total) as total_purchase
     , rank() over(order by sum(total) desc) as rnk
     from Invoice
     group by customerid) 
select (cus.firstname||' '||lastname) as best_customer, cus.city, c.total_purchase
from cte c 
join Customer cus on cus.customerid = c.customerid
where rnk =1;

5) The highest number of invoices belongs to which country?

select country, no_of_invoices
from
     (select billingcountry as country, count(1) as no_of_invoices
	  ,rank() over(order by count(1) desc) as rnk
	  from Invoice
      group by billingcountry) x
where x.rnk = 1;

6) Name the best customer (customer who spent the most money).

select (c.firstname||' '||c.lastname) as customer_name
from (
      select customerid as customer, sum(total) as total_purchase
      ,rank() over(order by sum(total) desc) as rnk
      from Invoice
	  group by customerid) x
join customer c on c.customerid = x.customerid
where rnk =1;

select (c.firstname||' '||c.lastname) as customer_name
from (
    select customerid, sum(total) total_purchase
    , rank() over(order by sum(total) desc) as rnk
    from Invoice
    group by customerid) x
join customer c on c.customerid = x.customerid
where rnk=1;

7) Suppose you want to host a rock concert in a city and want to know which location should host it.
-- Query the dataset to find the city with the most rock-music listeners to answer this question.

select billingcity, count(1) as no_of_listeners
from InvoiceLine il
join Track t on t.trackid = il.trackid
join Genre g on g.genreid = t.genreid
join Invoice inv on inv.invoiceid = il.invoiceid
where g.name = 'Rock'
group by billingcity
order by count(1) desc
limit 1;


8) Identify all the albums who have less then 5 track under them.
    Display the album name, artist name and the no of tracks in the respective album.

select alb.title as album_name, art.name as artist_name, count(1) as no_of_tracks
from album alb
join track t on t.albumid = alb.albumid
join artist art on art.artistid = alb.artistid
group by alb.title, art.name
having count(1) < 5;

9) Display the track, album, artist and the genre for all tracks which are not purchased.

select t.name as track, alb.title as album, art.name as artist_name, g.name as genre
from Track t 
join Genre g on g.genreid = t.genreid
join Album alb on alb.albumid = t.albumid
join Artist art on art.artistid = alb.artistid
where not exists (select
	              from InvoiceLine il
	              where il.trackid = t.trackid);

10) Find artist who have performed in multiple genres. Diplay the aritst name and the genre.

with temp as
	(select distinct art.name as artist_name, g.name as genre
    from Artist art 
    join Album alb on alb.artistid = art.artistid 
    join Track t on t.albumid = alb.albumid 
    join Genre g on g.genreid = t.genreid
	order by 1,2),
final_artist as
	(select artist_name
	 from temp t
	 group by artist_name
	 having count(1) >1)
select t.*
from temp t
join final_artist fa on fa.artist_name = t.artist_name
order by 1,2;

11) Which is the most popular and least popular genre?
Popularity is defined based on how many times it has been purchased.

with temp as
      (select g.name as genre,  count(1) as no_of_songs
	   ,rank () over(order by count(1) desc) as rnk
       from genre g
       join track t on t.genreid = g.genreid
       join InvoiceLine il on il.trackid = t.trackid
       group by g.name
	   order by 2 desc),
max_rank as
	(select max(rnk) as max_rnk
	from temp t)
select genre, no_of_songs
, case when rnk = 1 then 'Most Popular' else 'Least Popular' end as Popular_Flag
from temp t
inner join max_rank mr on rnk = max_rnk or rnk = 1;

12) Identify if there are tracks more expensive than others. If there are then
    display the track name along with the album title and artist name for these expensive tracks.

select t.name as track, alb.title as album, art.name as artist_name
from Track t 
join Album alb on alb.albumid = t.albumid
join Artist art on art.artistid = alb.artistid
where unitprice > (select min(unitprice) from Track)

13) Find the artist who has contributed with the maximum no of songs/tracks. Display the artist name and the no of songs.

select artist_name from 
	(select art.name as artist_name, count(1) as no_of_songs 
	  ,rank() over(order by count(1) desc) as rnk
      from Track t 
      join Album alb on alb.albumid = t.albumid
      join Artist art on art.artistid = alb.artistid
      group by art.name) x
where x.rnk = 1;
